/* ========================================
 *  Solomon Systech SSD1306 OLED Library for the Cypress PSOC 4  
 *  Written By Matthew Bon 2018
 *  Released under MIT license 
 *
 * ========================================
*/
#ifndef  __`$INSTANCE_NAME`_SSD1306_API_H__
    
#define  __`$INSTANCE_NAME`_SSD1306_API_H__
    
 
#include <cytypes.h> 
#define command_mode 0x3C //
#define display_mode 0x3D //
#define Write  0
#define Read   1
#define Left   0
#define Right  1
int `$INSTANCE_NAME`_OLED_mode_select(int addr); //Switches display between Command and Display mode
void `$INSTANCE_NAME`_OLED_Start(); //Initializes the display
void `$INSTANCE_NAME`_OLED_toggle_Reset(); //Resets display
void `$INSTANCE_NAME`_OLED_shutdown(); //Puts display in reset
void `$INSTANCE_NAME`_OLED_wakeup(); //Pulls display out of reset 

/*Structure containing display configuration parameters, see SSD1306 datasheet for detailed descriptions*/ 
struct `$INSTANCE_NAME`_OLED_Configuration{
    int offset; //Display offset 
    int start_line; //Display starting line, 
    int segment_remap; //Display segment configuration
    int scan_direction; //Display scan direction
    int com_pins; //Controller output pins
    int contrast; //Display contrast 
    int mode; //Normal or Inverse display mode 
};

void `$INSTANCE_NAME`_OLED_config(struct `$INSTANCE_NAME`_OLED_Configuration *config); 

void `$INSTANCE_NAME`_OLED_create_default_config(struct `$INSTANCE_NAME`_OLED_Configuration *defualt_config); //Initializes the display using the defaults neccsary for the Sparkfun microOLED breakout board
void `$INSTANCE_NAME`_OLED_create_custom_config(struct `$INSTANCE_NAME`_OLED_Configuration *custom_config,int offset, int start_line, int segment_remap, int scan_direction, int com_pins, int contrast, int mode); //Initializes the display based on a custom configuration

/* Scroll Functions */ 
void `$INSTANCE_NAME`_OLED_scroll_stop(); //stop scrolling
void `$INSTANCE_NAME`_OLED_scroll_start(); //start scrolling
void `$INSTANCE_NAME`_OLED_H_scroll_config(int direction,int start_page,int end_page, int scroll_step); //configure horizontal scrolling 
void `$INSTANCE_NAME`_OLED_HV_scroll_config(int direction,int start_page,int end_page, int scroll_step, int vertical_offset, int fixed_rows, int scroll_rows); //configure horizontal and vertical scrolling
void `$INSTANCE_NAME`_OLED_vertical_scroll_area(int fixed_rows, int scroll_rows); //configure vertical scroll area 

/* Addressing Function */ 
void `$INSTANCE_NAME`_OLED_set_addr_mode(uint8 mode); //Sets addressing mode of the display, currently only supports page addressing mode
void `$INSTANCE_NAME`_OLED_set_page_addr(uint8 page); //Sets page of display memory to begin writing to
void `$INSTANCE_NAME`_OLED_set_column_addr(uint8 column); //Sets display column to begin writing to

/*Data Functions*/ 
void `$INSTANCE_NAME`_OLED_bulk_write(uint8 *data, uint8 x, uint8 y);//Writes data from buffer to display  
void `$INSTANCE_NAME`_OLED_clear_display(); //Wipes display, sets all pixels value to 0
int `$INSTANCE_NAME`_OLED_write_characters(char *data, uint8 row, uint8 column, uint8 length); //Writes characters to display

/*Graphics Functions*/ 
uint8 `$INSTANCE_NAME`_OLED_draw_horizontal_line(uint8 x, uint8 y, uint8 length); //Draw horizontal line
uint8 `$INSTANCE_NAME`_OLED_draw_vertical_line(uint8 x, uint8 y, uint8 length); //Draw vertical line
uint8 `$INSTANCE_NAME`_OLED_draw_rectangle(uint8 x, uint8 y, uint8 width, uint8 height, uint8 fill); //Draw rectangle on display 


static uint8_t `$INSTANCE_NAME`_screenmemory[] = {}; //Buffer to hold data to write to display 
/*Array of pre-defined characters for the OLED_write_characters function*/ 
static uint8_t `$INSTANCE_NAME`_Oled_characters[] = {
    0x00, 0xfc, 0x12, 0x12, 0x12, 0x12, 0xfc, 0x00, // 'A'
    0x00, 0xfe, 0x92, 0x92, 0x92, 0x92, 0x6c, 0x00, // 'B'
    0x00, 0x7c, 0x82, 0x82, 0x82, 0x82, 0x44, 0x00, // 'C' 
    0x00, 0xfe, 0x82, 0x82, 0x82, 0x82, 0x7c, 0x00, // 'D'
    0x00, 0xfe, 0x92, 0x92, 0x92, 0x92, 0x92, 0x00, // 'E' 
    0x00, 0xfe, 0x12, 0x12, 0x12, 0x12, 0x12, 0x00, // 'F' 
    0x00, 0x7c, 0x82, 0x92, 0x92, 0x92, 0x74, 0x00, // 'G' 
    0x00, 0xfe, 0x10, 0x10, 0x10, 0x10, 0xfe, 0x00, // 'H' 
    0x00, 0x82, 0x82, 0xfe, 0xfe, 0x82, 0x82, 0x00, // 'I' 
    0x00, 0x70, 0x80, 0x80, 0x80, 0x80, 0x7e, 0x00, // 'J' 
    0x00, 0xfe, 0x10, 0x10, 0x28, 0x44, 0x82, 0x00, // 'K' 
    0x00, 0xfe, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, // 'L' 
    0x00, 0xfe, 0x04, 0x08, 0x08, 0x04, 0xfe, 0x00, // 'M' 
    0x00, 0xfe, 0x04, 0x08, 0x10, 0x20, 0xfe, 0x00, // 'N' 
    0x00, 0x7c, 0x82, 0x82, 0x82, 0x82, 0x7c, 0x00, // 'O' 
    0x00, 0xfe, 0x12, 0x12, 0x12, 0x12, 0x0c, 0x00, // 'P' 
    0x00, 0x7f, 0x45, 0x49, 0x51, 0x61, 0x7e, 0x80, // 'Q' 
    0x00, 0xfe, 0x12, 0x12, 0x12, 0x32, 0xdc, 0x00, // 'R' 
    0x00, 0x4c, 0x92, 0x92, 0x92, 0x92, 0x60, 0x00, // 'S' 
    0x00, 0x02, 0x02, 0xfe, 0xfe, 0x02, 0x02, 0x00, // 'T' 
    0x00, 0x7e, 0x80, 0x80, 0x80, 0x80, 0x7e, 0x00, // 'U' 
    0x00, 0x3e, 0x40, 0x80, 0x80, 0x40, 0x3e, 0x00, // 'V' 
    0x00, 0xfe, 0x40, 0x20, 0x20, 0x40, 0xfe, 0x00, // 'W' 
    0x80, 0x42, 0x24, 0x18, 0x18, 0x24, 0x42, 0x80, // 'X' 
    0x00, 0x0e, 0x10, 0xe0, 0xe0, 0x10, 0x0e, 0x00, // 'Y' 
    0x00, 0xc2, 0xe2, 0xa2, 0x92, 0x8e, 0x86, 0x00, // 'Z' 
    0x00, 0x00, 0x00, 0xbe, 0xbe, 0x00, 0x00, 0x00, // '!' 
    //0x00, 0x00, 0x0c, 0x12, 0x12, 0x0c, 0x00, 0x00, // 'Â°' Need to figure out how to input this character
    0x00, 0x00, 0x00, 0xc0, 0xc0, 0x00, 0x00, 0x00, // '.' 
    0x00, 0x00, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, // ':' 
    0x00, 0x00, 0x00, 0x7c, 0x82, 0x00, 0x00, 0x00, // '(' 
    0x00, 0x00, 0x00, 0x00, 0x82, 0x7c, 0x00, 0x00, // ')' 
    0x00, 0x86, 0x46, 0x20, 0x10, 0xcc, 0xc2, 0x00, // '%' 
    0x00, 0x4c, 0x54, 0xd6, 0xd6, 0x54, 0x74, 0x00, // '$'
    0x00, 0x18, 0x18, 0x7e, 0x7e, 0x18, 0x18, 0x00, // '+' 
    0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, // '-' 
    0x00, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x00, // '=' 
    0x00, 0x04, 0x02, 0x02, 0xa2, 0x12, 0x1c, 0x00, // '?'
    0x00, 0xfe, 0x82, 0x82, 0x82, 0x82, 0xfe, 0x00, // '0' 
    0x00, 0x00, 0x04, 0xfe, 0xfe, 0x00, 0x00, 0x00, // '1' 
    0x00, 0xf2, 0x92, 0x92, 0x92, 0x92, 0x9e, 0x00, // '2' 
    0x00, 0x92, 0x92, 0x92, 0x92, 0x92, 0xfe, 0x00, // '3' 
    0x00, 0x1e, 0x10, 0x10, 0x10, 0x10, 0xfe, 0x00, // '4' 
    0x00, 0x9e, 0x92, 0x92, 0x92, 0x92, 0xf2, 0x00, // '5' 
    0x00, 0xfe, 0x92, 0x92, 0x92, 0x92, 0xf2, 0x00, // '6' 
    0x00, 0x02, 0x02, 0x02, 0xf2, 0x1a, 0x0e, 0x00, // '7' 
    0x00, 0xfe, 0x92, 0x92, 0x92, 0x92, 0xfe, 0x00, // '8' 
    0x00, 0x9e, 0x92, 0x92, 0x92, 0x92, 0xfe, 0x00, // '9' 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ' ' 
}; 


/*Utility Functions*/

uint8 `$INSTANCE_NAME`_OLED_int_to_char(uint8 number); //Converts int 

#endif

/* [] END OF FILE */
